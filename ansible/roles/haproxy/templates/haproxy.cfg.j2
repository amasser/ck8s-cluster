global
        log /dev/log    local0
        log /dev/log    local1 notice
        chroot /var/lib/haproxy
        stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
        stats timeout 30s
        user haproxy
        group haproxy
        daemon

        # Raise global maxconn
        maxconn {{ haproxy_global_maxconn }}

        # Default SSL material locations
        ca-base /etc/ssl/certs
        crt-base /etc/ssl/private

        # Default ciphers to use on SSL-enabled listening sockets.
        # For more information, see ciphers(1SSL). This list is from:
        #  https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
        # An alternative list with additional directives can be obtained from
        #  https://mozilla.github.io/server-side-tls/ssl-config-generator/?server=haproxy
        ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS
        ssl-default-bind-options no-sslv3

defaults
        log     global
        mode    http
        option  httplog
        option  dontlognull
        # Raise the maximum number of connections (default 2000).
        maxconn {{ haproxy_defaults_maxconn }}
        timeout connect 5000
        # Raise timeout to 10 minutes (default 50000 (ms))
        timeout client  10m
        timeout server  10m
        errorfile 400 /etc/haproxy/errors/400.http
        errorfile 403 /etc/haproxy/errors/403.http
        errorfile 408 /etc/haproxy/errors/408.http
        errorfile 500 /etc/haproxy/errors/500.http
        errorfile 502 /etc/haproxy/errors/502.http
        errorfile 503 /etc/haproxy/errors/503.http
        errorfile 504 /etc/haproxy/errors/504.http

# Most of the values above are defaults.
# Values below are specific for our setup.

# show stats
frontend stats
  mode   http
  bind   0.0.0.0:{{ haproxy_stats_port }}
  mode   http
  option httplog
  option dontlognull
  stats  enable
  stats  refresh 2s
  stats  uri /

frontend http-frontend
  mode tcp
  option tcplog
  bind 0.0.0.0:80
  default_backend http-backend
  timeout client  {{ haproxy_ingress_timeout }}
  timeout server  {{ haproxy_ingress_timeout }}

frontend https-frontend
  mode tcp
  option tcplog
  bind 0.0.0.0:443
  default_backend https-backend
  timeout client  {{ haproxy_ingress_timeout }}
  timeout server  {{ haproxy_ingress_timeout }}

frontend k8s-frontend
  mode tcp
  option tcplog
  bind 0.0.0.0:6443
  default_backend k8s-backend

backend http-backend
  mode tcp
  balance roundrobin
  option tcplog
  option tcp-check
  #option log-health-checks
  # health checks every 2s, 2 fails => DOWN, 3 success => UP
  default-server inter 2s fall 2 rise 3
  timeout client  {{ haproxy_ingress_timeout }}
  timeout server  {{ haproxy_ingress_timeout }}
  {% for worker in groups.workers -%}
  server {{ worker }} {{ hostvars[worker].private_ip }}:80 check on-marked-down shutdown-sessions send-proxy
  {% endfor %}

backend https-backend
  mode tcp
  balance roundrobin
  option tcplog
  option tcp-check
  #option log-health-checks
  # health checks every 2s, 2 fails => DOWN, 3 success => UP
  default-server inter 2s fall 2 rise 3
  timeout client  {{ haproxy_ingress_timeout }}
  timeout server  {{ haproxy_ingress_timeout }}
  {% for worker in groups.workers -%}
  server {{ worker }} {{ hostvars[worker].private_ip }}:443 check on-marked-down shutdown-sessions send-proxy
  {% endfor %}

backend k8s-backend
  mode tcp
  balance roundrobin
  option tcplog
  option tcp-check
  #option log-health-checks
  # health checks every 2s, 2 fails => DOWN, 3 success => UP
  default-server inter 2s fall 2 rise 3
  {% for master in groups.masters -%}
  server {{ master }} {{ hostvars[master].private_ip }}:6443 check on-marked-down shutdown-sessions
  {% endfor %}
