name: Matrix-pipeline

on:
  schedule:
    - cron: "0 5 * * *"

jobs:
  build-image:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - uses: whoan/docker-build-with-cache-action@v3
      with:
        username: "${{ secrets.DOCKERHUB_USER }}"
        password: "${{ secrets.DOCKERHUB_PASSWORD }}"
        image_name: elastisys/ck8s-ops
        image_tag: ${{ github.sha }}
        context: pipeline

  unit-tests:
    needs: build-image
    runs-on: ubuntu-latest
    container:
      image: elastisys/ck8s-ops:${{ github.sha }}
    steps:
    - uses: actions/checkout@v1
    - run: ./pipeline/test/services/unit-tests/test-opa.sh
      shell: bash

  test-matrix:
    needs: unit-tests
    runs-on: ubuntu-latest
    container:
      image: elastisys/ck8s-ops:${{ github.sha }}
    strategy:
      fail-fast: false
      # max-parallel: 1
      matrix:
        cloud: ["exoscale", "safespring", "citycloud"]
        # cloud: ["safespring", "exoscale", "aws", "citycloud"]
        flavor: ["ha"]
        ## In addition to the matrix, add this
        # include:
        #   - cloud: aws
        #     flavor: "default"
        ## Remove the following from the matrix
        # exclude:
        #   - cloud: safespring
        #     flavor: ha
        #   - cloud: exoscale
        #     flavor: default
        #   - cloud: citycloud
        #     flavor: default
    steps:
    - uses: actions/checkout@v1
    - name: Initialize ck8s
      run: ./pipeline/init.bash
      shell: bash
      env:
        CK8S_CONFIG_PATH: ./ck8s_pipeline_config
        CK8S_CLOUD_PROVIDER: ${{ matrix.cloud }}
        CK8S_PGP_FP: 3EEFED60C2E86263117AC3F7792CF1BD81B69515
        PGP_KEY: ${{ secrets.PGP_KEY }}
        PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
        TF_TOKEN: ${{ secrets.TF_TOKEN }}
        # Prefixed with CI to prevent confusing people they are used from env
        # and not from secrets.env.
        # Exoscale
        CI_EXOSCALE_KEY: ${{ secrets.EXOSCALE_API_KEY }}
        CI_EXOSCALE_SECRET: ${{ secrets.EXOSCALE_SECRET_KEY }}
        # Safespring
        SAFESPRING_OS_USERNAME: ${{ secrets.SAFESPRING_OS_USERNAME }}
        SAFESPRING_OS_PASSWORD: ${{ secrets.SAFESPRING_OS_PASSWORD }}
        SAFESPRING_S3_ACCESS_KEY: ${{ secrets.SAFESPRING_S3_ACCESS_KEY }}
        SAFESPRING_S3_SECRET_KEY: ${{ secrets.SAFESPRING_S3_SECRET_KEY }}
        # Citycloud
        CITYCLOUD_OS_USERNAME: ${{ secrets.CITYCLOUD_OS_USERNAME }}
        CITYCLOUD_OS_PASSWORD: ${{ secrets.CITYCLOUD_OS_PASSWORD }}
        CITYCLOUD_S3_ACCESS_KEY: ${{ secrets.CITYCLOUD_S3_ACCESS_KEY }}
        CITYCLOUD_S3_SECRET_KEY: ${{ secrets.CITYCLOUD_S3_SECRET_KEY }}
        # Common variables for multiple clouds
        CI_AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        CI_AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        # The flavor to use
        CI_CK8S_FLAVOR: ${{ matrix.flavor }}
    - name: Upload config pre-apply
      if: always()
      uses: actions/upload-artifact@v1
      with:
        name: ck8s-config-${{ matrix.cloud }}-${{ matrix.flavor }}
        path: ./ck8s_pipeline_config
    - name: Apply all
      run: ./pipeline/apply.bash
      shell: bash
      env:
        CK8S_CONFIG_PATH: ./ck8s_pipeline_config
        PGP_KEY: ${{ secrets.PGP_KEY }}
        PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
        TF_TOKEN: ${{ secrets.TF_TOKEN }}
    - name: Upload config post-apply
      if: always()
      uses: actions/upload-artifact@v1
      with:
        name: ck8s-config-${{ matrix.cloud }}-${{ matrix.flavor }}
        path: ./ck8s_pipeline_config
    - name: Cleanup
      if: always()
      run: ./pipeline/cleanup.bash
      shell: bash
      env:
        CK8S_CONFIG_PATH: ./ck8s_pipeline_config
        PGP_KEY: ${{ secrets.PGP_KEY }}
        PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
        TF_TOKEN: ${{ secrets.TF_TOKEN }}

  cleanup-docker-image:
    needs: test-matrix
    if: always()
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Cleanup-docker-image
      run: ./pipeline/cleanup-docker-image.bash
      shell: bash
      env:
        DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
        DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
