name: Exoscale

on:
  pull_request:
    branches:
      - cluster
  push:
    branches:
      - 'pre-release-*'

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-go@v2
    - run: make test

  build-image:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: whoan/docker-build-with-cache-action@v3
      with:
        username: "${{ secrets.DOCKERHUB_USERNAME }}"
        password: "${{ secrets.DOCKERHUB_PASSWORD }}"
        image_name: elastisys/ckctl
        image_tag: ${{ github.sha }}

  e2e:
    needs: build-image
    runs-on: ubuntu-latest
    container:
      image: elastisys/ckctl:${{ github.sha }}
    env:
      CK8S_CONFIG_PATH: /ck8s-config
      CK8S_AUTO_APPROVE: true
      CK8S_LOG_LEVEL: debug
      TFE_TOKEN: ${{ secrets.TF_TOKEN }}
    steps:
    - uses: actions/checkout@v2
    - run: ./pipeline/setup-pgp.bash
      env:
        PGP_KEY: ${{ secrets.PGP_KEY }}
        PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
    # TODO: This could perhaps be replaced with the terraform-credentials-env.
    #       https://github.com/apparentlymart/terraform-credentials-env
    - run: ./pipeline/setup-terraform.bash
      env:
        TF_TOKEN: ${{ secrets.TF_TOKEN }}
    - run: ckctl init cluster-pipeline-${{ github.run_id }} exoscale
      env:
        CK8S_PGP_FP: 3EEFED60C2E86263117AC3F7792CF1BD81B69515
    - run: ./pipeline/configure.bash
      env:
        CI_EXOSCALE_KEY: ${{ secrets.EXOSCALE_KEY }}
        CI_EXOSCALE_SECRET: ${{ secrets.EXOSCALE_SECRET }}
    - run: ckctl apply --cluster sc
    - run: ckctl apply --cluster wc
    - run: ckctl status --cluster sc
    - run: ckctl status --cluster wc
    - run: ./pipeline/e2e-tests.bash
    - name: Upload config
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: ck8s-config
        path: /ck8s-config

  get-versions:
    if: startsWith(github.ref , 'refs/heads/pre-release-' )
    needs: e2e
    runs-on: ubuntu-latest
    container:
      image: elastisys/ckctl:${{ github.sha }}
    env:
      CK8S_CONFIG_PATH: /ck8s-config
      CK8S_AUTO_APPROVE: true
      CK8S_LOG_LEVEL: debug
      TFE_TOKEN: ${{ secrets.TF_TOKEN }}
    steps:
    - name: Checkout ck8s-cluster
      uses: actions/checkout@v2
    - name: Download config
      uses: actions/download-artifact@v2
      with:
        name: ck8s-config
        path: /ck8s-config
    - name: Setup pgp key for sops
      run: ./pipeline/setup-pgp.bash
      env:
        PGP_KEY: ${{ secrets.PGP_KEY }}
        PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
    - name: Setup terraform cloud credentials
      run: ./pipeline/setup-terraform.bash
      env:
        TF_TOKEN: ${{ secrets.TF_TOKEN }}
    - name: Configure whitelisting
      run: ./pipeline/configure.bash
      env:
        CI_EXOSCALE_KEY: ${{ secrets.EXOSCALE_KEY }}
        CI_EXOSCALE_SECRET: ${{ secrets.EXOSCALE_SECRET }}
    - name: Update whitelisting for service cluster
      run: ckctl apply --cluster sc
    - name: Update whitelisting for service cluster
      run: ckctl apply --cluster wc
    - name: Update versions for each application in ck8s
      run: ./pipeline/versions.sh
      shell: bash
    - name: Upload version.json
      uses: actions/upload-artifact@v2
      with:
        name: version.json
        path: version.json

  create-release-pr:
    if: startsWith(github.ref , 'refs/heads/pre-release-')
    needs: get-versions
    runs-on: ubuntu-latest
    steps:
    - name: Checkout ck8s-cluster
      uses: actions/checkout@v2
    - name: Download version.json
      uses: actions/download-artifact@v2
      with:
        name: version.json
        path: versions
    - name: Move version.json to correct path
      run: mv versions/version.json release/version.json
    - name: Run release script
      run: ./release/release.sh
      id: release-script
      shell: bash
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Create pull-request to release branch.
      uses: repo-sync/pull-request@v2
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        destination_branch: "${{ steps.release-script.outputs.MERGE_BRANCH }}"
        pr_title: "Releasing version ${{ steps.release-script.outputs.RELEASE_VERSION }}"

  cleanup:
    needs: create-release-pr
    if: always()
    runs-on: ubuntu-latest
    container:
      image: elastisys/ckctl:${{ github.sha }}
    env:
      CK8S_CONFIG_PATH: /ck8s-config
      CK8S_AUTO_APPROVE: true
      CK8S_LOG_LEVEL: debug
      TFE_TOKEN: ${{ secrets.TF_TOKEN }}
    steps:
    - name: Download config
      uses: actions/download-artifact@v2
      with:
        name: ck8s-config
        path: /ck8s-config
    - uses: actions/checkout@v2
    - run: ./pipeline/setup-pgp.bash
      env:
        PGP_KEY: ${{ secrets.PGP_KEY }}
        PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
    - run: ./pipeline/setup-terraform.bash
      env:
        TF_TOKEN: ${{ secrets.TF_TOKEN }}
    - if: always()
      run: ckctl destroy --cluster wc
    - if: always()
      run: ckctl destroy --cluster sc
      # We don't run --destroy-remote-workspace if: always() to reduce the risk
      # of leaving cloud resources unmanaged.
    - run: ckctl destroy --cluster sc --destroy-remote-workspace

  clean-image:
    needs: cleanup
    if: always()
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - run: ./pipeline/cleanup-docker-image.bash
      env:
        DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
