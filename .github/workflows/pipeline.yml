name: Exoscale-pipeline

on: 
  pull_request:
    branches:
      - master
  push:
    branches:
      - 'release-*'
jobs:
  build-image:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - uses: whoan/docker-build-with-cache-action@v3
      with:
        username: "${{ secrets.DOCKERHUB_USER }}"
        password: "${{ secrets.DOCKERHUB_PASSWORD }}"
        image_name: elastisys/ck8s-ops
        image_tag: ${{ github.sha }}
        context: pipeline

  infra:
    needs: build-image
    runs-on: ubuntu-latest
    container: 
      image: elastisys/ck8s-ops:${{ github.sha }}
    steps:
    - uses: actions/checkout@v1
    - run: echo $GITHUB_RUN_ID
      shell: bash
    - run: env
      shell: bash
    - run: ./pipeline/infra.sh
      shell: bash
      env:
        CLOUD_PROVIDER: exoscale
        TF_TOKEN: ${{ secrets.TF_TOKEN }}
        SSH_KEY_SC: ${{ secrets.SSH_KEY_SC }}
        SSH_KEY_WC: ${{ secrets.SSH_KEY_WC }}
        EXOSCALE_API_KEY: ${{ secrets.EXOSCALE_API_KEY }}
        EXOSCALE_SECRET_KEY: ${{ secrets.EXOSCALE_SECRET_KEY }}
        VAULT_APPROLE_RID: ${{ secrets.VAULT_APPROLE_RID }}
        VAULT_APPROLE_SID: ${{ secrets.VAULT_APPROLE_SID }}
    - run: ./pipeline/create-s3-buckets.sh
      shell: bash
      env:
        CLOUD_PROVIDER: exoscale
        S3_ACCESS_KEY: ${{ secrets.EXOSCALE_API_KEY }}
        S3_SECRET_KEY: ${{ secrets.EXOSCALE_SECRET_KEY }}
    - name: Upload infra.json
      if: always()
      uses: actions/upload-artifact@v1
      with:
        name: infra.json
        path: infra.json
    - name: upload terraform output
      if: always()
      uses: actions/upload-artifact@v1
      with:
        name: tfoutput        
        path: tfoutput

  rke-sc:
    needs: infra
    runs-on: ubuntu-latest
    container:
      image: elastisys/ck8s-ops:${{ github.sha }}
    steps:
    - uses: actions/checkout@v1
    - name: Download infra.json
      uses: actions/download-artifact@v1
      with:
        name: infra.json
        path: .
    - run: ./pipeline/rke-sc.sh
      shell: bash
      env:
        CLOUD_PROVIDER: exoscale
        SSH_KEY_SC: ${{ secrets.SSH_KEY_SC }}
        SSH_KEY_WC: ${{ secrets.SSH_KEY_WC }}
        EXOSCALE_API_KEY: ${{ secrets.EXOSCALE_API_KEY }}
        EXOSCALE_SECRET_KEY: ${{ secrets.EXOSCALE_SECRET_KEY }}
        VAULT_APPROLE_RID: ${{ secrets.VAULT_APPROLE_RID }}
        VAULT_APPROLE_SID: ${{ secrets.VAULT_APPROLE_SID }}
    - name: Upload kube_config
      uses: actions/upload-artifact@v1
      with:
        name: kube_config_eck-sc.yaml
        path: kube_config_eck-sc.yaml
    - name: Upload rke output
      if: always()
      uses: actions/upload-artifact@v1
      with:
        name: rke-sc-output
        path: rke-sc-output

  rke-wc:
    needs: infra
    runs-on: ubuntu-latest
    container: 
      image: elastisys/ck8s-ops:${{ github.sha }}
    steps:
    - uses: actions/checkout@v1
    - name: Download infra.json
      uses: actions/download-artifact@v1
      with:
        name: infra.json
        path: .
    - run: ./pipeline/rke-wc.sh
      shell: bash
      env:
        CLOUD_PROVIDER: exoscale
        SSH_KEY_SC: ${{ secrets.SSH_KEY_SC }}
        SSH_KEY_WC: ${{ secrets.SSH_KEY_WC }}
        EXOSCALE_API_KEY: ${{ secrets.EXOSCALE_API_KEY }}
        EXOSCALE_SECRET_KEY: ${{ secrets.EXOSCALE_SECRET_KEY }}
        VAULT_APPROLE_RID: ${{ secrets.VAULT_APPROLE_RID }}
        VAULT_APPROLE_SID: ${{ secrets.VAULT_APPROLE_SID }}
    - name: Upload kube_config
      uses: actions/upload-artifact@v1
      with:
        name: kube_config_eck-wc.yaml
        path: kube_config_eck-wc.yaml
    - name: Upload rke output
      if: always()
      uses: actions/upload-artifact@v1
      with:
        name: rke-wc-output
        path: rke-wc-output

  deploy-sc:
    needs: [rke-sc,rke-wc]
    runs-on: ubuntu-latest
    container: 
      image: elastisys/ck8s-ops:${{ github.sha }}
    steps:
    - uses: actions/checkout@v1
    - name: Download infra.json
      uses: actions/download-artifact@v1
      with:
        name: infra.json
        path: .
    - name: Download kube_config
      uses: actions/download-artifact@v1
      with:
        name: kube_config_eck-sc.yaml
        path: .
    - run: ./pipeline/deploy-sc.sh
      shell: bash
      env:
        CLOUD_PROVIDER: exoscale
        S3_ACCESS_KEY: ${{ secrets.EXOSCALE_API_KEY }}
        S3_SECRET_KEY: ${{ secrets.EXOSCALE_SECRET_KEY }}
        EXOSCALE_API_KEY: ${{ secrets.EXOSCALE_API_KEY }}
        EXOSCALE_SECRET_KEY: ${{ secrets.EXOSCALE_SECRET_KEY }}
        VAULT_APPROLE_RID: ${{ secrets.VAULT_APPROLE_RID }}
        VAULT_APPROLE_SID: ${{ secrets.VAULT_APPROLE_SID }}
    - name: Upload deploy output
      if: always()
      uses: actions/upload-artifact@v1
      with:
        name: deploy-sc-output
        path: deploy-sc-output

  deploy-wc:
    needs: [rke-sc,rke-wc]
    runs-on: ubuntu-latest
    container: 
      image: elastisys/ck8s-ops:${{ github.sha }}
    steps:
    - uses: actions/checkout@v1
    - name: Download infra.json
      uses: actions/download-artifact@v1
      with:
        name: infra.json
        path: .
    - name: Download kube_config
      uses: actions/download-artifact@v1
      with:
        name: kube_config_eck-wc.yaml
        path: .
    - run: ./pipeline/deploy-wc.sh
      shell: bash
      env:
        CLOUD_PROVIDER: exoscale
        S3_ACCESS_KEY: ${{ secrets.EXOSCALE_API_KEY }}
        S3_SECRET_KEY: ${{ secrets.EXOSCALE_SECRET_KEY }}
        EXOSCALE_API_KEY: ${{ secrets.EXOSCALE_API_KEY }}
        EXOSCALE_SECRET_KEY: ${{ secrets.EXOSCALE_SECRET_KEY }}
        VAULT_APPROLE_RID: ${{ secrets.VAULT_APPROLE_RID }}
        VAULT_APPROLE_SID: ${{ secrets.VAULT_APPROLE_SID }}
    - name: Upload deploy output
      if: always()
      uses: actions/upload-artifact@v1
      with:
        name: deploy-wc-output
        path: deploy-wc-output
  
  test-sc:
    needs: [deploy-wc, deploy-sc]
    runs-on: ubuntu-latest
    container: 
      image: elastisys/ck8s-ops:${{ github.sha }}
    steps:
    - uses: actions/checkout@v1
    - name: Download infra.json
      uses: actions/download-artifact@v1
      with:
        name: infra.json
        path: .
    - name: Download kube_config
      uses: actions/download-artifact@v1
      with:
        name: kube_config_eck-sc.yaml
        path: .
    - run: ./pipeline/test-sc.sh
      shell: bash
      env:
        CLOUD_PROVIDER: exoscale
        EXOSCALE_API_KEY: ${{ secrets.EXOSCALE_API_KEY }}
        EXOSCALE_SECRET_KEY: ${{ secrets.EXOSCALE_SECRET_KEY }}
        VAULT_APPROLE_RID: ${{ secrets.VAULT_APPROLE_RID }}
        VAULT_APPROLE_SID: ${{ secrets.VAULT_APPROLE_SID }}

  test-wc:
    needs: [deploy-wc, deploy-sc]
    runs-on: ubuntu-latest
    container: 
      image: elastisys/ck8s-ops:${{ github.sha }}
    steps:
    - uses: actions/checkout@v1
    - name: Download infra.json
      uses: actions/download-artifact@v1
      with:
        name: infra.json
        path: .
    - name: Download kube_config
      uses: actions/download-artifact@v1
      with:
        name: kube_config_eck-wc.yaml
        path: .
    - run: ./pipeline/test-wc.sh
      shell: bash
      env:
        CLOUD_PROVIDER: exoscale
        EXOSCALE_API_KEY: ${{ secrets.EXOSCALE_API_KEY }}
        EXOSCALE_SECRET_KEY: ${{ secrets.EXOSCALE_SECRET_KEY }}
        VAULT_APPROLE_RID: ${{ secrets.VAULT_APPROLE_RID }}
        VAULT_APPROLE_SID: ${{ secrets.VAULT_APPROLE_SID }}

  get-versions:
    needs: [deploy-wc, deploy-sc]
    runs-on: ubuntu-latest
    container: 
      image: elastisys/ck8s-ops:${{ github.sha }}
    steps:
    - uses: actions/checkout@v1
    - name: Download kube_config
      uses: actions/download-artifact@v1
      with:
        name: kube_config_eck-wc.yaml
        path: .
    - name: Download kube_config
      uses: actions/download-artifact@v1
      with:
        name: kube_config_eck-sc.yaml
        path: .
    - run: ./pipeline/versions.sh
      shell: bash
    - name: Upload version.json
      uses: actions/upload-artifact@v1
      with:
        name: version.json
        path: version.json

  clean-up:
    needs: [test-sc,test-wc,get-versions]
    if: always()
    runs-on: ubuntu-latest
    container: 
      image: elastisys/ck8s-ops:${{ github.sha }}
    steps:
    - uses: actions/checkout@v1
    - run: ./pipeline/cleanup.sh
      shell: bash
      env: 
        CLOUD_PROVIDER: exoscale
        TF_TOKEN: ${{ secrets.TF_TOKEN }}
        SSH_KEY_SC: ${{ secrets.SSH_KEY_SC }}
        SSH_KEY_WC: ${{ secrets.SSH_KEY_WC }}
        EXOSCALE_API_KEY: ${{ secrets.EXOSCALE_API_KEY }}
        EXOSCALE_SECRET_KEY: ${{ secrets.EXOSCALE_SECRET_KEY }}
        VAULT_APPROLE_RID: ${{ secrets.VAULT_APPROLE_RID }}
        VAULT_APPROLE_SID: ${{ secrets.VAULT_APPROLE_SID }}
        DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
        DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
    - run: ./pipeline/delete-s3-buckets.sh
      if: always()
      shell: bash
      env:
        CLOUD_PROVIDER: exoscale
        S3_ACCESS_KEY: ${{ secrets.EXOSCALE_API_KEY }}
        S3_SECRET_KEY: ${{ secrets.EXOSCALE_SECRET_KEY }}
