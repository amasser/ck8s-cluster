name: Exoscale-pipeline

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - 'pre-release-*'
jobs:
  build-image:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - uses: whoan/docker-build-with-cache-action@v3
      with:
        username: "${{ secrets.DOCKERHUB_USER }}"
        password: "${{ secrets.DOCKERHUB_PASSWORD }}"
        image_name: elastisys/ck8s-ops
        image_tag: ${{ github.sha }}
        context: pipeline

  init:
    needs: build-image
    runs-on: ubuntu-latest
    container:
      image: elastisys/ck8s-ops:${{ github.sha }}
    steps:
    - uses: actions/checkout@v1
    - run: ./pipeline/init.bash
      shell: bash
      env:
        CK8S_CONFIG_PATH: ./ck8s_pipeline_config
        CK8S_CLOUD_PROVIDER: exoscale
        CK8S_PGP_FP: 3EEFED60C2E86263117AC3F7792CF1BD81B69515
        PGP_KEY: ${{ secrets.PGP_KEY }}
        PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
        TF_TOKEN: ${{ secrets.TF_TOKEN }}
        # Prefixed with CI to prevent confusing people they are used from env
        # and not from secrets.env.
        CI_EXOSCALE_KEY: ${{ secrets.EXOSCALE_API_KEY }}
        CI_EXOSCALE_SECRET: ${{ secrets.EXOSCALE_SECRET_KEY }}
    - name: Upload config
      if: always()
      uses: actions/upload-artifact@v1
      with:
        name: ck8s-config
        path: ./ck8s_pipeline_config

  apply:
    needs: init
    runs-on: ubuntu-latest
    container:
      image: elastisys/ck8s-ops:${{ github.sha }}
    steps:
    - uses: actions/checkout@v1
    - name: Download config
      uses: actions/download-artifact@v1
      with:
        name: ck8s-config
        path: ./ck8s_pipeline_config
    - run: ./pipeline/apply.bash
      shell: bash
      env:
        CK8S_CONFIG_PATH: ./ck8s_pipeline_config
        PGP_KEY: ${{ secrets.PGP_KEY }}
        PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
        TF_TOKEN: ${{ secrets.TF_TOKEN }}
    - name: Upload config
      if: always()
      uses: actions/upload-artifact@v1
      with:
        name: ck8s-config
        path: ./ck8s_pipeline_config

  get-versions:
    if: startsWith(github.ref , 'refs/heads/pre-release-' )
    needs: apply
    runs-on: ubuntu-latest
    container:
      image: elastisys/ck8s-ops:${{ github.sha }}
    steps:
    - uses: actions/checkout@v1
    - name: Download config
      uses: actions/download-artifact@v1
      with:
        name: ck8s-config
        path: ./ck8s_pipeline_config
    - run: ./pipeline/versions.sh
      shell: bash
      env:
        CK8S_CONFIG_PATH: ./ck8s_pipeline_config
        PGP_KEY: ${{ secrets.PGP_KEY }}
        PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
    - name: Upload version.json
      uses: actions/upload-artifact@v1
      with:
        name: version.json
        path: version.json

  create-release-pr:
    if: startsWith(github.ref , 'refs/heads/pre-release-')
    needs: get-versions
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: download version.json
      uses: actions/download-artifact@v1
      with:
        name: version.json
        path: ./release/verision.json
    - run: ./release/release.sh
      id: release-script
      shell: bash
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: pull-request
      uses: repo-sync/pull-request@v2
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        destination_branch: "${{ steps.release-script.outputs.MERGE_BRANCH }}"
        pr_title: "Releasing version ${{ steps.release-script.outputs.RELEASE_VERSION }}"

  cleanup:
    needs: create-release-pr
    if: always()
    runs-on: ubuntu-latest
    container:
      image: elastisys/ck8s-ops:${{ github.sha }}
    steps:
    - uses: actions/checkout@v1
    - name: Download config
      uses: actions/download-artifact@v1
      with:
        name: ck8s-config
        path: ./ck8s_pipeline_config
    - run: ./pipeline/cleanup.bash
      shell: bash
      env:
        CK8S_CONFIG_PATH: ./ck8s_pipeline_config
        PGP_KEY: ${{ secrets.PGP_KEY }}
        PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
        TF_TOKEN: ${{ secrets.TF_TOKEN }}
        DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
        DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
