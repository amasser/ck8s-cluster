image: elastisys/exoscale-pipeline
pipelines:
  pull-requests:
    '**':
      - step:
          name: Infrastructure
          script:
            # Variables
            - source pipeline/init.sh
            - export TF_VAR_dns_prefix=pipeline-$BITBUCKET_BUILD_NUMBER
            # Infrastructure
            - cd terraform/
            - echo '1' | TF_WORKSPACE=pipeline terraform init
            - terraform workspace new pipeline-$BITBUCKET_BUILD_NUMBER
            - terraform init
            - ./set-execution-mode.sh
            - terraform plan -var 'public_ingress_cidr_whitelist=["0.0.0.0/0"]' -out=tfplan -input=false
            - terraform apply -input=false tfplan
            # Generate hosts.json
            - ../scripts/gen-hosts.sh
            - ./../pipeline/test/infrastructure/ssh.sh system-services
            - ./../pipeline/test/infrastructure/ssh.sh customer
          artifacts:
            - hosts.json
          after-script:
            - ./pipeline/after-script.sh

      - parallel:
          - step:
              name: system service rke
              script:
                - source pipeline/init.sh
                - source pipeline/variables.sh
                - ./scripts/check-docker.sh system-services
                - ./scripts/gen-rke-conf-system.sh > ./eck-system.yaml
                - rke up --config ./eck-system.yaml
                - export KUBECONFIG=$(pwd)/kube_config_eck-system.yaml
                - cd pipeline/test/k8s
                - ./check-nodes.sh system-services
              artifacts:
                - kube_config_eck-system.yaml
              after-script:
                - ./pipeline/after-script.sh
          - step:
              name: customer rke
              script:
                - source pipeline/init.sh
                - source pipeline/variables.sh
                - ./scripts/check-docker.sh customer
                - ./scripts/gen-rke-conf-customer.sh > ./eck-customer.yaml
                - rke up --config ./eck-customer.yaml
                - export KUBECONFIG=$(pwd)/kube_config_eck-customer.yaml
                - cd pipeline/test/k8s
                - ./check-nodes.sh customer
              artifacts:
                - kube_config_eck-customer.yaml
              after-script:
                - ./pipeline/after-script.sh
      
      - parallel:
          - step:
              name: system service deploy
              script:
                - source pipeline/init.sh
                - source pipeline/variables.sh
                - export KUBECONFIG=$(pwd)/kube_config_eck-system.yaml
                - echo $KUBECONFIG
                - kubectl get pods --all-namespaces
                - ./scripts/deploy-system.sh
                - kubectl get pods --all-namespaces
                - kubectl get nodes

              after-script:
                - ./pipeline/after-script.sh
          - step:
              name: customer deploy
              script:
                - source pipeline/init.sh
                - source pipeline/variables.sh
                - export KUBECONFIG=$(pwd)/kube_config_eck-customer.yaml
                - echo $KUBECONFIG
                - export ECK_SYSTEM_KUBECONFIG=$(pwd)/kube_config_eck-system.yaml
                - kubectl get pods --all-namespaces
                - ./scripts/deploy-customer.sh
                - kubectl get pods --all-namespaces
                - kubectl get nodes

              after-script:
                - ./pipeline/after-script.sh

      - parallel:
          - step:
              name: system service test
              script:
                # Variables
                - source pipeline/init.sh
                - source pipeline/variables.sh
                - cd terraform/
                - echo '1' | TF_WORKSPACE=pipeline terraform init
                - terraform workspace select pipeline-$BITBUCKET_BUILD_NUMBER
                - cd ..
                - export KUBECONFIG=$(pwd)/kube_config_eck-system.yaml
                - source ./scripts/common.sh
                # Tests
                - ./pipeline/test/services/test-ss.sh

              after-script:
                - ./pipeline/after-script.sh
          - step:
              name: customer test
              script:
                # Variables
                - source pipeline/init.sh
                - source pipeline/variables.sh
                - cd terraform/
                - echo '1' | TF_WORKSPACE=pipeline terraform init
                - terraform workspace select pipeline-$BITBUCKET_BUILD_NUMBER
                - cd ..
                - export KUBECONFIG=$(pwd)/kube_config_eck-customer.yaml
                - source ./scripts/common.sh
                # Services
                - ./pipeline/test/services/test-c.sh

              after-script:
                - ./pipeline/after-script.sh

      - step:
          name: Clean up
          script:
            - source pipeline/init.sh
            - export TF_VAR_dns_prefix=pipeline-$BITBUCKET_BUILD_NUMBER
            - cd terraform/
            - echo '1' | TF_WORKSPACE=pipeline-$BITBUCKET_BUILD_NUMBER terraform init
            - terraform workspace select pipeline-$BITBUCKET_BUILD_NUMBER
            - terraform destroy -auto-approve
            - terraform workspace select pipeline
            - terraform workspace delete pipeline-$BITBUCKET_BUILD_NUMBER
