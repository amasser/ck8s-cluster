image: elastisys/exoscale-pipeline
pipelines:
  pull-requests:
    '**':
      - step:
          name: Infrastructure
          script:
            # Variables
            - source pipeline/init.sh
            - export TF_VAR_dns_prefix=pipeline-$BITBUCKET_BUILD_NUMBER
            # Infrastructure
            - cd terraform/
            - echo '1' | TF_WORKSPACE=pipeline terraform init
            - terraform workspace new pipeline-$BITBUCKET_BUILD_NUMBER
            - terraform init
            - ./set-execution-mode.sh
            - terraform plan -var 'public_ingress_cidr_whitelist=["0.0.0.0/0"]' -out=tfplan -input=false
            - terraform apply -input=false tfplan
            # Generate infra.json
            - cd ..
            - ./scripts/gen-infra.sh > infra.json
            - ./pipeline/test/infrastructure/ssh.sh service_cluster "$BITBUCKET_CLONE_DIR/infra.json"
            - ./pipeline/test/infrastructure/ssh.sh workload_cluster "$BITBUCKET_CLONE_DIR/infra.json"
          artifacts:
            - infra.json
          after-script:
            - ./pipeline/after-script.sh

      - parallel:
          - step:
              name: Service cluster rke
              script:
                - build_dir="/opt/atlassian/pipelines/agent/build"
                - source pipeline/init.sh
                - source pipeline/variables.sh
                - ./scripts/check-docker.sh service_cluster "$BITBUCKET_CLONE_DIR/infra.json"
                - ./scripts/gen-rke-conf-sc.sh "$BITBUCKET_CLONE_DIR/infra.json" > ./eck-sc.yaml
                - rke up --config ./eck-sc.yaml
                - export KUBECONFIG=$(pwd)/kube_config_eck-sc.yaml
                - cd pipeline/test/k8s
                - ./check-nodes.sh service_cluster "$BITBUCKET_CLONE_DIR/infra.json"
              artifacts:
                - kube_config_eck-sc.yaml
              after-script:
                - ./pipeline/after-script.sh
          - step:
              name: Workload cluster rke
              script:
                - build_dir="/opt/atlassian/pipelines/agent/build"
                - source pipeline/init.sh
                - source pipeline/variables.sh
                - ./scripts/check-docker.sh workload_cluster "$BITBUCKET_CLONE_DIR/infra.json"
                - ./scripts/gen-rke-conf-wc.sh "$BITBUCKET_CLONE_DIR/infra.json" > ./eck-wc.yaml
                - rke up --config ./eck-wc.yaml
                - export KUBECONFIG=$(pwd)/kube_config_eck-wc.yaml
                - cd pipeline/test/k8s
                - ./check-nodes.sh workload_cluster "$BITBUCKET_CLONE_DIR/infra.json"
              artifacts:
                - kube_config_eck-wc.yaml
              after-script:
                - ./pipeline/after-script.sh
  
      - parallel:
          - step:
              name: Service cluster deploy
              script:
                - build_dir="/opt/atlassian/pipelines/agent/build"
                - source pipeline/init.sh
                - source pipeline/variables.sh
                - export KUBECONFIG=$(pwd)/kube_config_eck-sc.yaml
                - ./scripts/deploy-sc.sh "$BITBUCKET_CLONE_DIR/infra.json"
                - kubectl get pods --all-namespaces
                - kubectl get nodes
              after-script:
                - ./pipeline/after-script.sh
          - step:
              name: Workload cluster deploy
              script:
                - build_dir="/opt/atlassian/pipelines/agent/build"
                - source pipeline/init.sh
                - source pipeline/variables.sh
                - export KUBECONFIG=$(pwd)/kube_config_eck-wc.yaml
                - export ECK_SC_KUBECONFIG=$(pwd)/kube_config_eck-sc.yaml
                - ./scripts/deploy-wc.sh "$BITBUCKET_CLONE_DIR/infra.json"
                - kubectl get pods --all-namespaces
                - kubectl get nodes
              after-script:
                - ./pipeline/after-script.sh

      - parallel:
          - step:
              name: Service cluster test
              script:
                # Variables
                - source pipeline/init.sh
                - source pipeline/variables.sh
                - cd terraform/
                - echo '1' | TF_WORKSPACE=pipeline terraform init
                - terraform workspace select pipeline-$BITBUCKET_BUILD_NUMBER
                - cd ..
                - export KUBECONFIG=$(pwd)/kube_config_eck-sc.yaml
                - source ./scripts/common.sh
                # Tests
                - ./pipeline/test/services/test-sc.sh
              after-script:
                - ./pipeline/after-script.sh
          - step:
              name: Workload cluster test
              script:
                # Variables
                - source pipeline/init.sh
                - source pipeline/variables.sh
                - cd terraform/
                - echo '1' | TF_WORKSPACE=pipeline terraform init
                - terraform workspace select pipeline-$BITBUCKET_BUILD_NUMBER
                - cd ..
                - export KUBECONFIG=$(pwd)/kube_config_eck-wc.yaml
                - source ./scripts/common.sh
                # Services
                - ./pipeline/test/services/test-wc.sh
              after-script:
                - ./pipeline/after-script.sh

      - step:
          name: Clean up
          script:
            - source pipeline/init.sh
            - export TF_VAR_dns_prefix=pipeline-$BITBUCKET_BUILD_NUMBER
            - cd terraform/
            - echo '1' | TF_WORKSPACE=pipeline-$BITBUCKET_BUILD_NUMBER terraform init
            - terraform workspace select pipeline-$BITBUCKET_BUILD_NUMBER
            - terraform destroy -auto-approve
            - terraform workspace select pipeline
            - terraform workspace delete pipeline-$BITBUCKET_BUILD_NUMBER
