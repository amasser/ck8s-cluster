image: vanneback/exoscale-pipeline:ubuntu
pipelines:
  default:
    - step:
        name: Infrastructure
        script:
          # Variables
          - source /init.sh
          - export TF_VAR_dns_prefix=pipeline-$BITBUCKET_BUILD_NUMBER
          # Infrastructure
          - cd terraform/
          - echo '1' | TF_WORKSPACE=pipeline terraform init
          - terraform workspace new pipeline-$BITBUCKET_BUILD_NUMBER
          - terraform init
          - ./set-execution-mode.sh
          - terraform plan -var 'public_ingress_cidr_whitelist=["0.0.0.0/0"]' -out=tfplan -input=false
          - terraform apply -input=false tfplan
        after-script:
          - 'if [ "$BITBUCKET_EXIT_CODE" == "0" ]; then exit 0 ; fi'
          - source /init.sh
          - export TF_VAR_dns_prefix=pipeline-$BITBUCKET_BUILD_NUMBER
          - cd terraform/
          - echo '1' | TF_WORKSPACE=pipeline terraform init
          - terraform workspace select pipeline-$BITBUCKET_BUILD_NUMBER
          - terraform destroy -auto-approve
          - terraform workspace select pipeline
          - terraform workspace delete pipeline-$BITBUCKET_BUILD_NUMBER

    - parallel:
        - step:
            name: system service rke
            script:
              # Variables
              - source /init.sh
              - cd terraform/
              - echo '1' | TF_WORKSPACE=pipeline terraform init
              - terraform workspace select pipeline-$BITBUCKET_BUILD_NUMBER
              # RKE
              # Sleep needed for docker to start on nodes.
              - sleep 40
              - cd ..
              - ./scripts/gen-rke-conf-ss.sh > ./eck-ss.yaml
              - rke up --config ./eck-ss.yaml
            artifacts:
              - kube_config_eck-ss.yaml
            after-script:
              - 'if [ "$BITBUCKET_EXIT_CODE" == "0" ]; then exit 0 ; fi'
              - source /init.sh
              - export TF_VAR_dns_prefix=pipeline-$BITBUCKET_BUILD_NUMBER
              - export KUBECONFIG=$(pwd)/kube_config_eck-ss.yaml
              - kubectl get pods --all-namespaces
              - kubectl describe pods --all-namespaces
              - cd terraform/
              - echo '1' | TF_WORKSPACE=pipeline terraform init
              - terraform workspace select pipeline-$BITBUCKET_BUILD_NUMBER
              - terraform destroy -auto-approve
              - terraform workspace select pipeline
              - terraform workspace delete pipeline-$BITBUCKET_BUILD_NUMBER
        - step:
            name: customer rke
            script:
              # Variables
              - source /init.sh
              - cd terraform/
              - echo '1' | TF_WORKSPACE=pipeline terraform init
              - terraform workspace select pipeline-$BITBUCKET_BUILD_NUMBER
              # RKE
              # Sleep needed for docker to start on nodes.
              - sleep 40
              - cd ..
              - ./scripts/gen-rke-conf-c.sh > ./eck-c.yaml
              - rke up --config ./eck-c.yaml
            artifacts:
              - kube_config_eck-c.yaml

            after-script:
              - 'if [ "$BITBUCKET_EXIT_CODE" == "0" ]; then exit 0 ; fi'
              - source /init.sh
              - export TF_VAR_dns_prefix=pipeline-$BITBUCKET_BUILD_NUMBER
              - export KUBECONFIG=$(pwd)/kube_config_eck-c.yaml
              - kubectl get pods --all-namespaces
              - kubectl describe pods --all-namespaces
              - cd terraform/
              - echo '1' | TF_WORKSPACE=pipeline-$BITBUCKET_BUILD_NUMBER terraform init
              - terraform workspace select pipeline-$BITBUCKET_BUILD_NUMBER
              - terraform destroy -auto-approve
              - terraform workspace select pipeline
              - terraform workspace delete pipeline-$BITBUCKET_BUILD_NUMBER
    
    - parallel:
        - step:
            name: system service deploy
            script:
              # Variables
              - source /init.sh
              - cd terraform/
              - echo '1' | TF_WORKSPACE=pipeline terraform init
              - terraform workspace select pipeline-$BITBUCKET_BUILD_NUMBER
              - cd ..
              # Services
              - ls
              - export KUBECONFIG=$(pwd)/kube_config_eck-ss.yaml
              - echo $KUBECONFIG
              - kubectl get pods --all-namespaces
              - ./scripts/deploy-ss.sh
              - kubectl get pods --all-namespaces
              - kubectl get nodes

            after-script:
              - 'if [ "$BITBUCKET_EXIT_CODE" == "0" ]; then exit 0 ; fi'
              - source /init.sh
              - export TF_VAR_dns_prefix=pipeline-$BITBUCKET_BUILD_NUMBER
              - export KUBECONFIG=$(pwd)/kube_config_eck-ss.yaml
              - kubectl get pods --all-namespaces
              - kubectl describe pods --all-namespaces
              - cd terraform/
              - echo '1' | TF_WORKSPACE=pipeline terraform init
              - terraform workspace select pipeline-$BITBUCKET_BUILD_NUMBER
              - terraform destroy -auto-approve
              - terraform workspace select pipeline
              - terraform workspace delete pipeline-$BITBUCKET_BUILD_NUMBER
        - step:
            name: customer deploy
            script:
              # Variables
              - source /init.sh
              - cd terraform/
              - echo '1' | TF_WORKSPACE=pipeline terraform init
              - terraform workspace select pipeline-$BITBUCKET_BUILD_NUMBER
              - cd ..
              # Services
              - ls
              - export KUBECONFIG=$(pwd)/kube_config_eck-c.yaml
              - echo $KUBECONFIG
              - export ECK_SS_KUBECONFIG=$(pwd)/kube_config_eck-ss.yaml
              - kubectl get pods --all-namespaces
              - ./scripts/deploy-c.sh
              - kubectl get pods --all-namespaces
              - kubectl get nodes

            after-script:
              - 'if [ "$BITBUCKET_EXIT_CODE" == "0" ]; then exit 0 ; fi'
              - source /init.sh
              - export TF_VAR_dns_prefix=pipeline-$BITBUCKET_BUILD_NUMBER
              - export KUBECONFIG=$(pwd)/kube_config_eck-c.yaml
              - kubectl get pods --all-namespaces
              - kubectl describe pods --all-namespaces
              - cd terraform/
              - echo '1' | TF_WORKSPACE=pipeline-$BITBUCKET_BUILD_NUMBER terraform init
              - terraform workspace select pipeline-$BITBUCKET_BUILD_NUMBER
              - terraform destroy -auto-approve
              - terraform workspace select pipeline
              - terraform workspace delete pipeline-$BITBUCKET_BUILD_NUMBER

    - step:
        name: Clean up
        script:
          - source /init.sh
          - export TF_VAR_dns_prefix=pipeline-$BITBUCKET_BUILD_NUMBER
          - cd terraform/
          - echo '1' | TF_WORKSPACE=pipeline-$BITBUCKET_BUILD_NUMBER terraform init
          - terraform workspace select pipeline-$BITBUCKET_BUILD_NUMBER
          - terraform destroy -auto-approve
          - terraform workspace select pipeline
          - terraform workspace delete pipeline-$BITBUCKET_BUILD_NUMBER
